<script src="//maps.google.com/maps/api/js?v=3.25&amp;key=AIzaSyBgQ7vCrWLd-l-X_jKmM428M4r1Cd2moeE&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<script type="text/javascript" src="assets/prototype.js"></script>

<% if session[:user_reported] == "1"  %>
<div class="alert alert-warning alert-dismissible" role="alert">
           Hi, someone has reported that you have some Review that don't respect our user agreement. Your account is blocked and you cannot create new Review or Rating. Please contact us to unlock your account.
</div>
<%end%>     
     
<div class="page-header">
  <h1 style="font-family: 'Pacifico', cursive;">What's near you?</h1>
</div>

<% if isLoggedIn? &&  session[:user_reported] == "0" %>
    <%= link_to 'I have something to ask!', new_review_path, class: "btn btn-lg btn-primary btn-block" %>
    <br>
<% end %>


<div class="panel panel-default">
      <div id="map"> </div>
      <script>
          console.log('Page Refresh');
      </script>
</div>
   
<div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading">
      List of reviews near you
      <%= form_tag(reviews_path, :method => "get", id: "search-form") do %>
      <%= text_field_tag :search, params[:search], placeholder: "or Search Reviews" %>
      <%= submit_tag "Search" %>
      <% end %>
  </div>
  <div class="panel-body">
  </div>

<div class="table-responsive">
<table class="table">
  <thead>
    <tr>
      <th>Title</th>
      <th>Description</th>
      <th></th>
      <th></th>
      <th></th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @reviews.each do |review| %>
      <tr>
        <td><%= link_to review.title, review %></td>
        <td><%= link_to review.description, review %></td>
        <td><%= review.question1 %> <br> (<%= star_rating(get_point_question1(review)) %>)</td>
        
        <% if review.question2 != "" %>  
            <td><%= review.question2 %> <br> (<%= star_rating(get_point_question2(review)) %>)</td>
        <% else %>
            <td> </td>
        <% end %>
        
        <% if review.question3 != "" %>
            <td><%= review.question3 %> <br> (<%= star_rating(get_point_question3(review)) %>)</td>
        <% else %>
            <td> </td>            
        <% end %>
        
        
        <div class="btn-group" role="group">
         <td><%= link_to 'Show', review, class: "btn btn-default btn-sm" %></td>
      <!--   <td><%= link_to 'Edit', edit_review_path(review), class: "btn btn-default btn-sm" %></td>
          <td><%= link_to 'Destroy', review, method: :delete, data: { confirm: 'Are you sure?' }, class: "btn btn-default btn-sm" %></td>
      -->
        </div>
      </tr>
    <% end %>
  </tbody>
</table>

</div>  


  <div class="panel-body">
    <%= will_paginate %>
  </div>
</div>

<br>

<script>
    var doneTheStuff;
  
    var handler = Gmaps.build('Google');

    handler.buildMap({ internal: {id: 'map'} }, function(){
     
    markers_json = <%=raw @hash.to_json %>;
    markers = _.map(markers_json, function(marker_json){
            marker = handler.addMarker(marker_json);
            _.extend(marker, marker_json);
            return marker;
      });
     
     console.log('Showed pins:' +  markers.length);
     
    for (var i=0;i < markers.length; i++){
        var marker = markers[i];
        google.maps.event.addListener(marker.getServiceObject(), "click", function(evt) {
           saluta("My ID: " + marker.id)    });
    }
  
   // handler.bounds.extendWith(markers);
    //handler.fitMapToBounds();  
    handler.getMap().setZoom(17);  
    
    if(navigator.geolocation)
          navigator.geolocation.getCurrentPosition(displayOnMap);
  });

function getRadius(lat1,lat2,lon1,lon2) {
    var R = 6371000; // metres
    var φ1 = lat1 * Math.PI / 180;
    var φ2 = lat2 * Math.PI / 180;
    var Δφ = (lat2-lat1) * Math.PI / 180;
    var Δλ = (lon2-lon1) * Math.PI / 180;

    var a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
            Math.cos(φ1) * Math.cos(φ2) *
            Math.sin(Δλ/2) * Math.sin(Δλ/2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    var d = R * c;
   // console.log('Value:'+ (d/1000))
    setRadius(d/1000);
}

function displayOnMap(position){
    try {
      var marker = handler.addMarker({
        lat: position.coords.latitude,
        lng: position.coords.longitude
      });
      handler.map.centerOn(marker);
    }
    catch(err) {
        console.log('Errore mentre aggiungo i marker');
    }
   //   console.log('lat=' + position.coords.latitude + '&lon=' + position.coords.longitude);
      getOutput(position);
};


function getBoundsZoomLevel(bounds, mapDim) {
   //var bounds = map.getBounds();

    var center = bounds.getCenter();
    var ne = bounds.getNorthEast();

    // r = radius of the earth in statute miles
    var r = 3963.0;  

    // Convert lat or lng from decimal degrees into radians (divide by 57.2958)
    var lat1 = center.lat() / 57.2958; 
    var lon1 = center.lng() / 57.2958;
    var lat2 = ne.lat() / 57.2958;
    var lon2 = ne.lng() / 57.2958;

    // distance = circle radius from center to Northeast corner of bounds
    var dis = r * Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1));
    return dis;
}

function saluta(i) {
       //  console.log(i)
       //  alert(i)
  }

function setRadius(radius) {
  getRequest('update_user_radius?rad=' + radius, // URL for the PHP or Rails file
       drawOutput,  // handle successful request
       drawError    // handle error
  );
  return false;
}  

function getOutput(position) {
  getRequest('update_user_location?lat=' + position.coords.latitude + '&lon=' + position.coords.longitude, // URL for the PHP or Rails file
       drawOutput,  // handle successful request
       drawError    // handle error
  );
  return false;
}  
// handles drawing an error message
function drawError() {
     console.log('Bummer: there was an error!');
}
// handles the response, adds the html
function drawOutput(responseText) {
  //   console.log(responseText);
}
// helper function for cross-browser request object
function getRequest(url, success, error) {
    var req = false;
    try{
        // most browsers
        req = new XMLHttpRequest();
    } catch (e){
        // IE
        try{
            req = new ActiveXObject("Msxml2.XMLHTTP");
        } catch(e) {
            // try an older version
            try{
                req = new ActiveXObject("Microsoft.XMLHTTP");
            } catch(e) {
                return false;
            }
        }
    }
    if (!req) return false;
    if (typeof success != 'function') success = function () {};
    if (typeof error!= 'function') error = function () {};
    req.onreadystatechange = function(){
        if(req.readyState == 4) {
            return req.status === 200 ? 
                success(req.responseText) : error(req.status);
        }
    }
    req.open("GET", url, true);
    req.send(null);
    return req;
}

</script>